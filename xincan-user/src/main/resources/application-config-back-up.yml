address:
  nacos: 192.168.1.10:31150
  sentinel: 192.168.1.10:31160
  mysql:
    master: 192.168.1.10:31110
    slave1: 192.168.1.10:31120
    slave2: 192.168.1.10:31130

server:
  port: 8000
  undertow:
    # 设置 HTTP POST 内容的最大长度，默认不做限制
    #  max-http-post-size: -1
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
    # 每块buffer的空间大小,越小的空间被利用越充分
    buffer-size: 1024
    # 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
    #  buffers-per-region: 1024 # 这个参数不需要写了
    # 是否分配的直接内存
    direct-buffers: true
    threads:
      # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程,数量和CPU 内核数目一样即可
      io: 8
      # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载  io-threads*8
      worker: 64

spring:

  mvc:
    throw-exception-if-no-handler-found: true

  redis:
    host: 192.168.1.10
    port: 31140
    password: 123456
    timeout: 10000 #连接超时时间（毫秒）
    lettuce:
      pool:
        max-active: 8 # 连接池最大连接数
        max-wait: -1ms  # 连接池最大阻塞等待时间（使用负值表示没有限制）
        min-idle: 0 # 连接池中的最小空闲连接
        max-idle: 8 # 连接池中的最大空闲连接

  cloud:
    nacos:
      config:
        namespace: xincan-${spring.profiles.active}-0001
        server-addr: ${address.nacos}        # 配置中心url
        group: ${spring.profiles.active}_group
        file-extension: yaml                  # 配置文件类型
        username: nacos
        password: nacos
      discovery:
        server-addr: ${address.nacos}
        group: ${spring.profiles.active}_group
        namespace: xincan-${spring.profiles.active}-0001
        username: nacos
        password: nacos
    sentinel:
      transport:
        dashboard: ${address.sentinel}
        port: 8719
      datasource:
        flow:
          nacos:
            server-addr: ${address.nacos}
            data-id: ${spring.application.name}-sentinel
            group-id: ${spring.profiles.active}_group
            namespace: xincan-${spring.profiles.active}-0001
            data-type: json
            rule-type: flow
            username: nacos
            password: nacos

  datasource:
    master:
      driver-class-name: com.mysql.cj.jdbc.Driver
      jdbc-url: jdbc:mysql://${address.mysql.master}/xincan-user-${spring.profiles.active}?useSSL=true&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&autoReconnect=true&failOverReadOnly=false&allowMultiQueries=true&serverTimezone=GMT
      username: root
      password: 123456
    slave1:
      driver-class-name: com.mysql.cj.jdbc.Driver
      jdbc-url: jdbc:mysql://${address.mysql.slave1}/xincan-user-${spring.profiles.active}?useSSL=true&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&autoReconnect=true&failOverReadOnly=false&allowMultiQueries=true&serverTimezone=GMT
      username: root
      password: 123456
    slave2:
      driver-class-name: com.mysql.cj.jdbc.Driver
      jdbc-url: jdbc:mysql://${address.mysql.slave2}/xincan-user-${spring.profiles.active}?useSSL=true&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&autoReconnect=true&failOverReadOnly=false&allowMultiQueries=true&serverTimezone=GMT
      username: root
      password: 123456

# 解决Read Timeout 异常
feign:
  client:
    config:
      default:
        read-timeout: 60000
        connect-timeout: 60000

management:
  metrics:
    export:
      prometheus:
        step: 1m
  web:
    server:
      auto-time-requests: true
  endpoints:
    prometheus:
      id: ${spring.application.name}
    web:
      exposure:
        include: '*'
        # include: health,info,prometheus,metrics,httptrace,threaddump,heapdump,${spring.application.name},nacos-config
