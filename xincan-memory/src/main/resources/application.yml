
server:
  port: 8300
  undertow:
    # 设置 HTTP POST 内容的最大长度，默认不做限制
    #  max-http-post-size: -1
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
    # 每块buffer的空间大小,越小的空间被利用越充分
    buffer-size: 1024
    # 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
    #  buffers-per-region: 1024 # 这个参数不需要写了
    # 是否分配的直接内存
    direct-buffers: true
    threads:
      # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程,数量和CPU 内核数目一样即可
      io: 8
      # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载  io-threads*8
      worker: 64

spring:
  application:
    name: xincan-memory
  mvc:
    throw-exception-if-no-handler-found: true

management:
  metrics:
    export:
      prometheus:
        step: 1m
  web:
    server:
      auto-time-requests: true
  endpoints:
    prometheus:
      id: ${spring.application.name}
    web:
      exposure:
        include: health,info,prometheus,metrics,httptrace,threaddump,heapdump,${spring.application.name}

